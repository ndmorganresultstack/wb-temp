generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Address {
  addressName        String?         @db.NVarChar(255)
  addressType        String?         @db.NVarChar(255)
  addressId          Int             @id(map: "PK__Address__26A111ADEF0ADF56")
  addressLine1       String?         @db.NVarChar(255)
  addressLine2       String?         @db.NVarChar(255)
  city               String?         @db.NVarChar(255)
  state              String?         @db.NVarChar(255)
  zip                String?         @db.NVarChar(255)
  addressIdToAddress ClientAddress[] @relation("ClientAddress_addressIdToAddress")
  clientIdToAddress  ClientAddress[] @relation("ClientAddress_clientIdToAddress")
  Contact            Contact[]
  Property           Property[]
}

model BusinessTitle {
  businessTitleId Int       @id(map: "PK__Business__D38C0BE384617C5A") @default(autoincrement())
  titleName       String    @unique(map: "UQ__Business__252BE89C43458A6D") @db.NVarChar(100)
  createdAt       DateTime? @default(now(), map: "DF__BusinessT__Creat__71D1E811") @db.DateTime
  updatedAt       DateTime? @default(now(), map: "DF__BusinessT__Updat__72C60C4A") @db.DateTime
}

model Client {
  clientId       Int       @id(map: "PK__Client__81A2CBE1BC2C29C3")
  clientName     String?   @db.NVarChar(255)
  industry       String?   @db.NVarChar(255)
  website        String?   @db.NVarChar(255)
  existingClient Boolean?
  createdAt      DateTime? @db.DateTime
  updatedAt      DateTime? @db.DateTime
  deleted        Boolean?
  Contact        Contact[]
}

model ClientAddress {
  clientAddressesId  Int      @id(map: "PK__clientAd__3213E83F2C7808BA")
  addressId          Int?
  clientId           Int?
  addressIdToAddress Address? @relation("ClientAddress_addressIdToAddress", fields: [addressId], references: [addressId], onDelete: NoAction, onUpdate: NoAction, map: "FK__clientAdd__addre__42ACE4D4")
  clientIdToAddress  Address? @relation("ClientAddress_clientIdToAddress", fields: [clientId], references: [addressId], onDelete: NoAction, onUpdate: NoAction, map: "FK__clientAdd__clien__43A1090D")
}

model Contact {
  contactId          Int                  @id(map: "PK__Contact__7121FD35C60FC799")
  addressId          Int?
  contactType        String?              @db.NVarChar(255)
  firstName          String?              @db.NVarChar(255)
  lastName           String?              @db.NVarChar(255)
  email              String?              @db.NVarChar(255)
  phone              String?              @db.NVarChar(255)
  jobTitle           String?              @db.NVarChar(255)
  clientId           Int?
  status             String?              @db.NVarChar(255)
  leadSource         String?              @db.NVarChar(255)
  createdAt          DateTime?            @db.DateTime
  updatedAt          DateTime?            @db.DateTime
  deleted            Boolean?
  Address            Address?             @relation(fields: [addressId], references: [addressId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Contact__address__477199F1")
  Client             Client?              @relation(fields: [clientId], references: [clientId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Contact__clientI__4865BE2A")
  OpportunityContact OpportunityContact[]
  PropertyContact    PropertyContact[]
}

model Contract {
  contractId            Int          @id(map: "PK__Contract__13820941C9911A73")
  contractOpportunityId Int?
  startDate             DateTime?    @db.Date
  endDate               DateTime?    @db.Date
  refrenceNumber        String?      @db.NVarChar(255)
  totalValue            Decimal?     @db.Decimal(18, 0)
  annualValue           Decimal?     @db.Decimal(18, 0)
  totalDays             Int?
  Opportunity           Opportunity? @relation(fields: [contractOpportunityId], references: [opportunityId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Contract__contra__5006DFF2")
}

model Employee {
  employeeId                             String        @id(map: "PK__Employee__7038AE3CE2CF9795") @db.VarChar(20)
  lastName                               String        @db.NVarChar(50)
  firstName                              String        @db.NVarChar(50)
  headcount                              Int?          @default(1, map: "DF__Employees__Headc__73BA3083")
  hireDate                               DateTime?     @db.DateTime
  TOS                                    Decimal?      @db.Decimal(10, 2)
  termDate                               DateTime?     @db.DateTime
  birthday                               DateTime?     @db.Date
  homeAddress                            String?       @db.NVarChar(255)
  apt                                    String?       @db.NVarChar(50)
  city                                   String?       @db.NVarChar(50)
  homeStateAbbrev                        String?       @db.Char(2)
  zip                                    String?       @db.VarChar(10)
  homePhone                              String?       @db.VarChar(20)
  personalEmail                          String?       @db.NVarChar(100)
  employeeStatus                         String?       @default("Active", map: "DF__Employees__Emplo__74AE54BC") @db.NVarChar(20)
  createdAt                              DateTime?     @default(now(), map: "DF__Employees__Creat__75A278F5") @db.DateTime
  updatedAt                              DateTime?     @default(now(), map: "DF__Employees__Updat__76969D2E") @db.DateTime
  businessTitle                          String?       @db.NVarChar(255)
  functionCategory                       String?       @db.NVarChar(255)
  roleResponsibility                     String?       @db.NVarChar(255)
  clientServicesLeadEmployeeIdToEmployee Opportunity[] @relation("Opportunity_clientServicesLeadEmployeeIdToEmployee")
  operationsVPEmployeeIdToEmployee       Opportunity[] @relation("Opportunity_operationsVPEmployeeIdToEmployee")
  opportunityOwnerEmployeeIdToEmployee   Opportunity[] @relation("Opportunity_opportunityOwnerEmployeeIdToEmployee")
}

model ExternalLabor {
  externalLaborId Int       @id(map: "PK__External__4CB8722DB81EA082") @default(autoincrement())
  vendorNo        String    @db.VarChar(20)
  vendor          String    @db.NVarChar(100)
  purpose         String    @db.NVarChar(255)
  startDate       DateTime? @db.DateTime
  finishDate      DateTime? @db.DateTime
  hours           Decimal   @db.Decimal(10, 2)
  rate            Decimal   @db.Decimal(10, 2)
  totalCost       Decimal   @db.Decimal(15, 2)
  shareAdmin      Decimal?  @default(1.0000, map: "DF__ExternalL__share__589C25F3") @db.Decimal(5, 4)
  annualAdmin     Decimal?  @db.Decimal(15, 2)
  annualProperty  Decimal?  @db.Decimal(15, 2)
  createdAt       DateTime? @default(now(), map: "DF__ExternalL__creat__59904A2C") @db.DateTime
  updatedAt       DateTime? @default(now(), map: "DF__ExternalL__updat__5A846E65") @db.DateTime
}

model FunctionCategory {
  functionCategoryId Int       @id(map: "PK__Function__0AE2458B0CFD5860") @default(autoincrement())
  categoryName       String    @unique(map: "UQ__Function__8517B2E073D862A2") @db.NVarChar(50)
  createdAt          DateTime? @default(now(), map: "DF__FunctionC__Creat__7C4F7684") @db.DateTime
  updatedAt          DateTime? @default(now(), map: "DF__FunctionC__Updat__7D439ABD") @db.DateTime
}

model InternalLabor {
  internalLaborId   Int      @id(map: "PK_InternalLabor")
  fiscalYear        Int
  employee          String?  @db.VarChar(255)
  serviceAccount    String   @db.NVarChar(255)
  baseAnnualSalary  Decimal? @db.Decimal(15, 2)
  aprSalaryAnnual   Decimal? @db.Decimal(15, 2)
  janSalaryAnnual   Decimal? @db.Decimal(15, 2)
  salaryIncreasePct Int?
  bonusAnnual       Decimal? @db.Decimal(15, 2)
  bonusPct          Int?
  FYAnnualSalary    Decimal? @db.Decimal(15, 2)
  FYBonus           Decimal? @db.Decimal(15, 2)
  EESRE             Decimal? @db.Decimal(15, 2)
  EESREPct          Int?
  FYTotal           Decimal? @db.Decimal(15, 2)
  adminSharePct     Int?
  adminMgtAnnual    Decimal? @db.Decimal(15, 2)
  propMgtAnnual     Decimal? @db.Decimal(15, 2)
  jan               Decimal? @db.Decimal(15, 2)
  feb               Decimal? @db.Decimal(15, 2)
  mar               Decimal? @db.Decimal(15, 2)
  apr               Decimal? @db.Decimal(15, 2)
  may               Decimal? @db.Decimal(15, 2)
  jun               Decimal? @db.Decimal(15, 2)
  jul               Decimal? @db.Decimal(15, 2)
  aug               Decimal? @db.Decimal(15, 2)
  sep               Decimal? @db.Decimal(15, 2)
  oct               Decimal? @db.Decimal(15, 2)
  nov               Decimal? @db.Decimal(15, 2)
  dec               Decimal? @db.Decimal(15, 2)
}

model Opportunity {
  opportunityId                          Int                  @id(map: "PK__Opportun__7368FB845EF513AC")
  pitchStatus                            String?              @db.NVarChar(255)
  description                            String?              @db.NVarChar(255)
  probability                            Int?
  opportunityYear                        Int?
  allocation                             Int?
  durationDays                           Int?
  propertyId                             Int?
  salesStage                             String?              @db.NVarChar(255)
  expectedCloseDate                      DateTime?            @db.Date
  expectedTakeoverDate                   DateTime?            @db.Date
  opportunityType                        String?              @db.NVarChar(255)
  clientKeyObjective                     String?              @db.NVarChar(255)
  underwritingStage                      String?              @db.NVarChar(255)
  opportunityOwnerEmployeeId             String?              @db.VarChar(20)
  clientServicesLeadEmployeeId           String?              @db.VarChar(20)
  operationsVPEmployeeId                 String?              @db.VarChar(20)
  newAddition                            Boolean?
  annualFeeAmount                        Decimal?             @db.Decimal(18, 0)
  perUnitFee                             Decimal?             @db.Decimal(18, 0)
  managementFee                          Int?
  weightedForecast                       String?              @db.NVarChar(255)
  createdAt                              DateTime?            @db.DateTime
  updatedAt                              DateTime?            @db.DateTime
  deleted                                Boolean?
  Contract                               Contract[]
  clientServicesLeadEmployeeIdToEmployee Employee?            @relation("Opportunity_clientServicesLeadEmployeeIdToEmployee", fields: [clientServicesLeadEmployeeId], references: [employeeId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Opportuni__clien__4B422AD5")
  operationsVPEmployeeIdToEmployee       Employee?            @relation("Opportunity_operationsVPEmployeeIdToEmployee", fields: [operationsVPEmployeeId], references: [employeeId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Opportuni__opera__4C364F0E")
  opportunityOwnerEmployeeIdToEmployee   Employee?            @relation("Opportunity_opportunityOwnerEmployeeIdToEmployee", fields: [opportunityOwnerEmployeeId], references: [employeeId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Opportuni__oppor__4A4E069C")
  Property                               Property?            @relation(fields: [propertyId], references: [propertyId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Opportuni__prope__4959E263")
  OpportunityAction                      OpportunityAction[]
  OpportunityContact                     OpportunityContact[]
}

model OpportunityAction {
  opportunityActionId Int          @id(map: "PK__opportun__3213E83F813EF7BE")
  opportunityId       Int?
  actionName          String?      @db.NVarChar(255)
  actionDueDate       DateTime?    @db.Date
  actionCompletedDate DateTime?    @db.Date
  actionNotes         String?      @db.NVarChar(255)
  createdAt           DateTime?    @db.DateTime
  updatedAt           DateTime?    @db.DateTime
  deleted             Boolean?
  Opportunity         Opportunity? @relation(fields: [opportunityId], references: [opportunityId], onDelete: NoAction, onUpdate: NoAction, map: "FK__opportuni__oppor__4F12BBB9")
}

model OpportunityContact {
  opportunityContactId Int          @id(map: "PK__opportun__3213E83F84F0F8A1")
  contactId            Int?
  opportunityId        Int?
  Contact              Contact?     @relation(fields: [contactId], references: [contactId], onDelete: NoAction, onUpdate: NoAction, map: "FK__opportuni__conta__4D2A7347")
  Opportunity          Opportunity? @relation(fields: [opportunityId], references: [opportunityId], onDelete: NoAction, onUpdate: NoAction, map: "FK__opportuni__oppor__4E1E9780")
}

model Property {
  propertyId               Int               @id(map: "PK__Property__9C0B8C7DE36DACC9")
  propertyName             String?           @db.NVarChar(255)
  currentManagementCompany String?           @db.NVarChar(255)
  addressId                Int?
  unitCount                Int?
  yearOfConstruction       Int?
  productType              String?           @db.NVarChar(255)
  assetType                String?           @db.NVarChar(255)
  assetStatus              String?           @db.NVarChar(255)
  region                   String?           @db.NVarChar(255)
  metroArea                String?           @db.NVarChar(255)
  retailIncluded           Boolean?
  equityPartner            String?           @db.NVarChar(255)
  createdAt                DateTime?         @db.DateTime
  updatedAt                DateTime?         @db.DateTime
  deleted                  Boolean?
  Opportunity              Opportunity[]
  Address                  Address?          @relation(fields: [addressId], references: [addressId], onDelete: NoAction, onUpdate: NoAction, map: "FK__Property__addres__44952D46")
  PropertyContact          PropertyContact[]
}

model PropertyContact {
  propertyContactId Int       @id(map: "PK__property__3213E83F4424584F")
  propertyId        Int?
  contactId         Int?
  Contact           Contact?  @relation(fields: [contactId], references: [contactId], onDelete: NoAction, onUpdate: NoAction, map: "FK__propertyC__conta__467D75B8")
  Property          Property? @relation(fields: [propertyId], references: [propertyId], onDelete: NoAction, onUpdate: NoAction, map: "FK__propertyC__prope__4589517F")
}

model RoleResponsibility {
  roleResponsibilitiesId Int       @id(map: "PK__RoleResp__F7E3CD40BB06866A") @default(autoincrement())
  roleName               String    @unique(map: "UQ__RoleResp__8A2B616050C1DAC3") @db.NVarChar(100)
  createdAt              DateTime? @default(now(), map: "DF__RoleRespo__Creat__01142BA1") @db.DateTime
  updatedAt              DateTime? @default(now(), map: "DF__RoleRespo__Updat__02084FDA") @db.DateTime
}

model ServiceAccount {
  serviceAccountId   String         @id(map: "PK__ServiceA__20087132456A95EC") @db.VarChar(10)
  serviceDescription String         @db.NVarChar(255)
  createdAt          DateTime?      @default(now(), map: "DF__ServiceAc__Creat__02FC7413") @db.DateTime
  updatedAt          DateTime?      @default(now(), map: "DF__ServiceAc__Updat__03F0984C") @db.DateTime
  SoftwareCost       SoftwareCost[]
}

model SoftwareCost {
  softwareCostId     Int             @id(map: "PK__Software__25EDB8DC8002CD72") @default(autoincrement())
  vendor             String          @db.NVarChar(100)
  productDescription String          @db.NVarChar(255)
  soldBy             String?         @db.NVarChar(50)
  inUse              String?         @db.NVarChar(20)
  usedBy             String?         @db.NVarChar(100)
  yearsInService     Int?
  startDate          DateTime?       @db.DateTime
  finishDate         DateTime?       @db.DateTime
  noticeBy           DateTime?       @db.DateTime
  increasePct        Decimal?        @db.Decimal(5, 4)
  UOM                String?         @db.NVarChar(50)
  units              Int?
  unitCost           Decimal?        @db.Decimal(15, 4)
  subAmount          Decimal?        @db.Decimal(15, 2)
  salesTax           Decimal?        @db.Decimal(15, 2)
  totalDue           Decimal?        @db.Decimal(15, 2)
  billedFrequency    String?         @db.NVarChar(20)
  annualSpend        Decimal?        @db.Decimal(15, 2)
  shareAdminUnits    Int?
  annualAdmin        Decimal?        @db.Decimal(15, 2)
  sharePropertyUnits Int?
  annualProperty     Decimal?        @db.Decimal(15, 2)
  serviceAccountId   String?         @db.VarChar(10)
  category           String?         @db.NVarChar(100)
  createdAt          DateTime?       @default(now(), map: "DF__SoftwareC__Creat__04E4BC85") @db.DateTime
  updatedAt          DateTime?       @default(now(), map: "DF__SoftwareC__Updat__05D8E0BE") @db.DateTime
  ServiceAccount     ServiceAccount? @relation(fields: [serviceAccountId], references: [serviceAccountId], onDelete: NoAction, onUpdate: NoAction, map: "FK__SoftwareC__Servi__0C85DE4D")
}

model User {
  userId Int     @id(map: "PK_Users") @default(autoincrement())
  email  String? @db.VarChar(255)
}

model ProspectView {
  opportunityId Int       @id
  description   String?
  contactType   String?
  lastName      String?
  firstName     String?
  email         String?
  phone         String?
  jobTitle      String?
  status        String?
  leadSource    String?
  createdAt     DateTime?
  updatedAt     DateTime?
}
